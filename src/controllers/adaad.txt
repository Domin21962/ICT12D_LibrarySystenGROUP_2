The book is still not found
This is the Bookcontroller Code:ublic class BookController {
    private Connection conn;

    public BookController() {
        try {
            conn = DriverManager.getConnection("jdbc:mysql://localhost/library_db", "root", "");
        } catch (SQLException e) {
            e.printStackTrace();
        }
    }

    public ArrayList<Book> searchBooks(String keyword) {
        ArrayList<Book> books = new ArrayList<>();
        System.out.println("Searching books with keyword: " + keyword);
try {
   String sql = "SELECT b.book_id, b.title, b.author, b.year, b.genre, b.publisher, bc.content " +
             "FROM book b " +
             "LEFT JOIN book_content bc ON b.book_id = bc.book_id " +
             "WHERE b.title LIKE ? OR b.author LIKE ?";

PreparedStatement stmt = conn.prepareStatement(sql);
stmt.setString(1, "%" + keyword + "%");
stmt.setString(2, "%" + keyword + "%");

System.out.println("Executing SQL: " + sql);
ResultSet rs = stmt.executeQuery();
    
    int count = 0;
while (rs.next()) {
    count++;
    books.add(new Book(
        rs.getInt("book_id"),
        rs.getString("title"),
        rs.getString("author"),
        rs.getInt("year"),
        rs.getString("genre"),
        rs.getString("publisher"),
        rs.getString("content")
    ));
    System.out.println("Books found: " + count);
    System.out.println("Books found: " + books.size());
    }
} catch (SQLException e) {
    e.printStackTrace();
}
return books;
    }
}



This is the book code:
private int bookId;
    private String title;
    private String author;
    private int year;
    private String genre;
    private String publisher;
    private String content; // New field for book content
    
     public Book(int bookId, String title, String author, int year, String genre, String publisher, String content) {
        this.bookId = bookId;
        this.title = title;
        this.author = author;
        this.year = year;
        this.genre = genre;
        this.publisher = publisher;
        this.content = content;
    }

    public String getContent() {
        return content;
    }

    public void setContent(String content) {
        this.content = content;
    }

    public String getTitle() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }

    public String getAuthor() {
        throw new UnsupportedOperationException("Not supported yet."); // Generated from nbfs://nbhost/SystemFileSystem/Templates/Classes/Code/GeneratedMethodBody
    }
}


And this is searchBook code:
private void searchBook(String keyword) {
    BookController bookController = new BookController();
    ArrayList<Book> books = bookController.searchBooks(keyword);
    
    mainPanel.removeAll(); // Clear previous content
    mainPanel.setLayout(new BorderLayout());

    if (books.isEmpty()) {
        JLabel noResults = new JLabel("No books found!", SwingConstants.CENTER);
        noResults.setForeground(Color.WHITE);
        noResults.setFont(new Font("Arial", Font.BOLD, 18));
        mainPanel.add(noResults, BorderLayout.CENTER);
    } else {
        // Create a panel to hold multiple books
        JPanel bookListPanel = new JPanel();
        bookListPanel.setLayout(new BoxLayout(bookListPanel, BoxLayout.Y_AXIS));
        bookListPanel.setBackground(new Color(45, 49, 56));

        for (Book book : books) {
            JPanel bookPanel = new JPanel();
            bookPanel.setLayout(new BoxLayout(bookPanel, BoxLayout.Y_AXIS));
            bookPanel.setBackground(new Color(45, 49, 56));
            bookPanel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

            JLabel titleLabel = new JLabel("Title: " + book.getTitle());
            titleLabel.setForeground(Color.WHITE);
            titleLabel.setFont(new Font("Arial", Font.BOLD, 16));

            JLabel authorLabel = new JLabel("Author: " + book.getAuthor());
            authorLabel.setForeground(Color.LIGHT_GRAY);

            JTextArea contentArea = new JTextArea(book.getContent());
            contentArea.setLineWrap(true);
            contentArea.setWrapStyleWord(true);
            contentArea.setEditable(false);
            contentArea.setBackground(new Color(50, 55, 60));
            contentArea.setForeground(Color.WHITE);

            JScrollPane scrollPane = new JScrollPane(contentArea);
            scrollPane.setPreferredSize(new Dimension(800, 300));

            bookPanel.add(titleLabel);
            bookPanel.add(authorLabel);
            bookPanel.add(scrollPane);

            bookListPanel.add(bookPanel);
        }

        // Make the list scrollable
        JScrollPane listScrollPane = new JScrollPane(bookListPanel);
        listScrollPane.setPreferredSize(new Dimension(850, 400));

        mainPanel.add(listScrollPane, BorderLayout.CENTER);
    }

    mainPanel.revalidate();
    mainPanel.repaint();
}